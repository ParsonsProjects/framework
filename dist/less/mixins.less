//
// Mixins
// --------------------------------------------------


// Utilities
// -------------------------

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
.clearfix() {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

// Center-align a block level element
.center-block() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

// Placeholder text
.placeholder(@color: @input-color-placeholder) {
    &::-moz-placeholder           {
      color: @color;   // Firefox
      opacity: 1;
      font-style: italic;
    } // See https://github.com/twbs/bootstrap/pull/11526
    &:-ms-input-placeholder       { color: @color; font-style: italic; } // Internet Explorer 10+
    &::-webkit-input-placeholder  { color: @color; font-style: italic; } // Safari and Chrome
}

// Text overflow
// Requires inline-block or block for proper styling
.text-overflow() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// CSS image replacement
//
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757

.hide-text() {
    font: ~"0/0" a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
}

// CSS3 PROPERTIES
// --------------------------------------------------

// Single side border-radius
.border-radius(@radius) {
  border-radius: @radius;
   border-radius: @radius;
}
.border-top-radius(@radius) {
  border-top-right-radius: @radius;
   border-top-left-radius: @radius;
}
.border-right-radius(@radius) {
  border-bottom-right-radius: @radius;
     border-top-right-radius: @radius;
}
.border-bottom-radius(@radius) {
  border-bottom-right-radius: @radius;
   border-bottom-left-radius: @radius;
}
.border-left-radius(@radius) {
  border-bottom-left-radius: @radius;
     border-top-left-radius: @radius;
}

// Drop shadows
//
// Note: Deprecated `.box-shadow()` as of v3.1.0
.box-shadow(@shadow) {
  -webkit-box-shadow: @shadow; // iOS <4.3 & Android <4.1
          box-shadow: @shadow;
}

// Transitions
.transition(@transition) {
  //-webkit-transition: @transition;
          transition: @transition;
}
.transition-property(@transition-property) {
  //-webkit-transition-property: @transition-property;
          transition-property: @transition-property;
}
.transition-delay(@transition-delay) {
  //-webkit-transition-delay: @transition-delay;
          transition-delay: @transition-delay;
}
.transition-duration(@transition-duration) {
  //-webkit-transition-duration: @transition-duration;
          transition-duration: @transition-duration;
}
.transition-transform(@transition) {
  //-webkit-transition: -webkit-transform @transition;
     //-moz-transition: -moz-transform @transition;
       //-o-transition: -o-transform @transition;
          transition: transform @transition;
}

// Transformations
.rotate(@degrees) {
  //-webkit-transform: rotate(@degrees);
      //-ms-transform: rotate(@degrees); // IE9 only
          transform: rotate(@degrees);
}
.scale(@ratio; @ratio-y...) {
  //-webkit-transform: scale(@ratio, @ratio-y);
      //-ms-transform: scale(@ratio, @ratio-y); // IE9 only
          transform: scale(@ratio, @ratio-y);
}
.translate(@x; @y) {
  //-webkit-transform: translate(@x, @y);
      //-ms-transform: translate(@x, @y); // IE9 only
          transform: translate(@x, @y);
}
.skew(@x; @y) {
  //-webkit-transform: skew(@x, @y);
      //-ms-transform: skewX(@x) skewY(@y); // See https://github.com/twbs/bootstrap/issues/4885; IE9+
          transform: skew(@x, @y);
}
.translate3d(@x; @y; @z) {
  //-webkit-transform: translate3d(@x, @y, @z);
          transform: translate3d(@x, @y, @z);
}

.rotateX(@degrees) {
  //-webkit-transform: rotateX(@degrees);
      //-ms-transform: rotateX(@degrees); // IE9 only
          transform: rotateX(@degrees);
}
.rotateY(@degrees) {
  //-webkit-transform: rotateY(@degrees);
      //-ms-transform: rotateY(@degrees); // IE9 only
          transform: rotateY(@degrees);
}
.perspective(@perspective) {
  //-webkit-perspective: @perspective;
     //-moz-perspective: @perspective;
          perspective: @perspective;
}
.perspective-origin(@perspective) {
  //-webkit-perspective-origin: @perspective;
     //-moz-perspective-origin: @perspective;
          perspective-origin: @perspective;
}
.transform(@value) {
    //-webkit-transform: @value;
      //-ms-transform: @value; // IE9+
       //-o-transform: @value;
          transform: @value;
}
.transform-style(@style){
    //-webkit-transform-style: @style;
     //-moz-transform-style: @style;
       //-o-transform-style: @style;
          transform-style: @style;
}
.transform-origin(@origin) {
    //-webkit-transform-origin: @origin;
     //-moz-transform-origin: @origin;
      //-ms-transform-origin: @origin; // IE9 only
          transform-origin: @origin;
}

// Animations
.animation(@animation) {
    //-webkit-animation: @animation;
          animation: @animation;
}
.animation-name(@name) {
    //-webkit-animation-name: @name;
          animation-name: @name;
}
.animation-duration(@duration) {
    //-webkit-animation-duration: @duration;
          animation-duration: @duration;
}
.animation-timing-function(@timing-function) {
    //-webkit-animation-timing-function: @timing-function;
          animation-timing-function: @timing-function;
}
.animation-delay(@delay) {
    //-webkit-animation-delay: @delay;
          animation-delay: @delay;
}
.animation-iteration-count(@iteration-count) {
    //-webkit-animation-iteration-count: @iteration-count;
          animation-iteration-count: @iteration-count;
}
.animation-direction(@direction) {
    //-webkit-animation-direction: @direction;
          animation-direction: @direction;
}
.animation-fill-mode(@fill-mode) {
    //-webkit-animation-fill-mode: @fill-mode;
          animation-fill-mode: @fill-mode;
}
.animation-play-state(@fill-mode) {
    //-webkit-animation-play-state: @fill-mode;
          animation-play-state: @fill-mode;
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden`
.backface-visibility(@visibility){
    //-webkit-backface-visibility: @visibility;
     //-moz-backface-visibility: @visibility;
          backface-visibility: @visibility;
}

// Box sizing
.box-sizing(@boxmodel) {
    //-webkit-box-sizing: @boxmodel;
     //-moz-box-sizing: @boxmodel;
          box-sizing: @boxmodel;
}

// User select
// For selecting text on the page
.user-select(@select) {
    //-webkit-user-select: @select;
     //-moz-user-select: @select;
      //-ms-user-select: @select; // IE10+
          user-select: @select;
}

// Resize anything
.resizable(@direction) {
    resize: @direction; // Options: horizontal, vertical, both
    overflow: auto; // Safari fix
}

// CSS3 Content Columns
.content-columns(@column-count; @column-gap: @grid__gutter--width) {
    //-webkit-column-count: @column-count;
     //-moz-column-count: @column-count;
          column-count: @column-count;
    //-webkit-column-gap: @column-gap;
     //-moz-column-gap: @column-gap;
          column-gap: @column-gap;
}

// Optional hyphenation
.hyphens(@mode: auto) {
    word-wrap: break-word;
    -webkit-hyphens: @mode;
     -moz-hyphens: @mode;
      -ms-hyphens: @mode; // IE10+
       -o-hyphens: @mode;
          hyphens: @mode;
}

// Opacity
.opacity(@opacity) {
    opacity: @opacity;
    & when (@vars__ie8-support = true) {
      // IE8 filter
      @opacity-ie: (@opacity * 100);
      filter: ~"alpha(opacity=@{opacity-ie})";
    }
}

// display: inline-flex //
// applies to flex container

.inline-flexbox() {
  // 2009 spec
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  // tweener -ms- spec
  display: -ms-inline-flexbox;
  // 2013 spec
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flex;
  display: -o-inline-flex;
  display: inline-flex;
}
// display: flex //
// applies to flex container

.flexbox() {
  // 2009 spec
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  // // tweener -ms- spec
  // display: -webkit-flexbox;
  // display: -moz-flexbox;
  display: -ms-flexbox;
  // display: -o-flexbox;
  // display: flexbox;
  // 2013 spec
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
}

// flex //

// applies to flex-items

// specifying how items flex, in shorthand (like background property is shorthand)

// 2009 spec is box-flex, and only accepts numbers with decimals
// tweener -ms- spec and 2013 spec both use flex and contain 3 values instead of just one
// tweener spec has different names for their values but the values do the same thing

// 2009 spec only accepts a number (not just integer) as an input

// tweener -ms- spec works as follows
// -ms-flex: <positive-flex> <negative-flex> <preferred-size>
// positive-flex is integer indicating whether item should grow
// negative-flex is integer indicating whether item should shrink
// preferred-size uses any valid value for width or height (i.e. px, em, rem, %)

// 2013 spec works as follows
// flex: <flex-grow> <flex-shrink> <flex-basis>
// flex-grow is integer indicating whether item should grow
// flex-shrink is integer indicating whether item should shrink
// flex-basis  uses any valid value for width (i.e. px, em, rem, %)

// handling when 2013 or tweener spec is 'none' instead of shorthand values
.flex(@spec; @flex) when (@flex = none) and (@spec = 2013), (@spec = tweener) {
// tweener -ms- spec is same as 2013
// 2013 spec
  -webkit-flex: 0 0 auto;
  -moz-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  -o-flex: 0 0 auto;
  flex: 0 0 auto;
}


// handling when 2013 or tweener spec is 'auto' instead of shorthand values
.flex(@spec; @flex) when (@flex = auto) and (@spec = 2013), (@spec = tweener) {
// tweener -ms- spec is same as 2013
// 2013 spec
  -webkit-flex: 1 1 auto;
  -moz-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  -o-flex: 1 1 auto;
  flex: 1 1 auto;
}

// handling when 2013 or tweener spec is 'initial' instead of shorthand values
.flex(@spec; @flex) when (@flex = initial) and (@spec = 2013), (@spec = tweener) {
// tweener -ms- spec is same as 2013
// 2013 spec
  -webkit-flex: 0 1 auto;
  -moz-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  -o-flex: 0 1 auto;
  flex: 0 1 auto;
}

// handling 2009 'none' value
.flex(@spec; @grow) when (@grow = none) and (@spec = 2009) {
// 2009 spec
  -webkit-box-flex: 0.0;
  -moz-box-flex: 0.0;
  -ms-box-flex: 0.0;
  -o-box-flex: 0.0;
  box-flex: 0.0;
}

// handling remaining 2009 scenarios where it is not 'none'
.flex(@spec; @grow) when (isnumber(@grow)) and (@spec = 2009) {
  // 2009 spec (accepts only 1 integer value)
    -webkit-box-flex: @grow;
    -moz-box-flex: @grow;
    -ms-box-flex: @grow;
    -o-box-flex: @grow;
    box-flex: @grow;
}

// this should cover all other scenarios that are not 2009 and/or not 'none'
.flex(@spec; @grow; @shrink; @basis) when not (@spec = 2009) {
  // tweener -ms- spec is same as 2013
  // 2013 spec
    -webkit-flex: @grow @shrink @basis;
    -moz-flex: @grow @shrink @basis;
    -ms-flex: @grow @shrink @basis;
    -o-flex: @grow @shrink @basis;
    flex: @grow @shrink @basis;
}

// flex-direction //

// applies to flex container

// 2009 spec
.flex-direction(@direction) when (@direction = row) {
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  -ms-box-orient: horizontal;
  -o-box-orient: horizontal;
  box-orient: horizontal;
}
// 2009 spec
.flex-direction(@direction) when (@direction = row-reverse) {
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  -ms-box-orient: horizontal;
  -o-box-orient: horizontal;
  box-orient: horizontal;
  -webkit-box-direction: reverse;
  -moz-box-direction: reverse;
  -ms-box-direction: reverse;
  -o-box-direction: reverse;
  box-direction: reverse;
}
// 2009 spec
.flex-direction(@direction) when (@direction = column) {
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -ms-box-orient: vertical;
  -o-box-orient: vertical;
  box-orient: vertical;
}
// 2009 spec
.flex-direction(@direction) when (@direction = column-reverse) {
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -ms-box-orient: vertical;
  -o-box-orient: vertical;
  box-orient: vertical;
  -webkit-box-direction: reverse;
  -moz-box-direction: reverse;
  -ms-box-direction: reverse;
  -o-box-direction: reverse;
  box-direction: reverse;
}
// 2013 spec
.flex-direction(@direction) {
  -webkit-flex-direction: @direction;
  -moz-flex-direction: @direction;
  -ms-flex-direction: @direction;
  -o-flex-direction: @direction;
  flex-direction: @direction;
}

// order //

// applies to flex-items

// specifies the order of an individual flex item within a container; this is an override of natural DOM order

// 2009 spec is box-ordinal-group and starts at 1
// tweener -ms- spec is flex-order and starts at 0
// 2013 spec is order and starts at 0

.order(@order) {
// 2009 spec
  -webkit-box-ordinal-group: @order + 1;
  -moz-box-ordinal-group: @order + 1;
  -ms-box-ordinal-group: @order + 1;
  -o-box-ordinal-group: @order + 1;
  box-ordinal-group: @order + 1;
// tweener -ms- spec
    -ms-flex-order: @order;
// 2013 spec
  -webkit-order: @order;
  -moz-order: @order;
  -ms-order: @order;
  -o-order: @order;
  order: @order;
}

// flex-wrap //

// applies to flex container

// 2009 property is box-lines
// single == nowrap
// multiple == wrap
// no equivalent to wrap-reverse
// initial = single

// 2009 spec
.flex-wrap(@wrap-method) when (@wrap-method = wrap) {
  -webkit-lines: multiple;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -ms-box-lines: multiple;
  -o-box-lines: multiple;
  box-lines: multiple;
}

//box lines doesn't have wrap reverse, so use box-direction
// 2009 spec
.flex-wrap(@wrap-method) when (@wrap-method = wrap-reverse) {
  -webkit-lines: multiple;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -ms-box-lines: multiple;
  -o-box-lines: multiple;
  box-lines: multiple;
  -webkit-box-direction: reverse;
  -moz-box-direction: reverse;
  -ms-box-direction: reverse;
  -o-box-direction: reverse;
  box-direction: reverse;
}

// 2009 spec
.flex-wrap(@wrap-method) when (@wrap-method = nowrap) {
  -webkit-lines: single;
  -webkit-box-lines: single;
  -moz-box-lines: single;
  -ms-box-lines: single;
  -o-box-lines: single;
  box-lines: single;
}

// 2013 spec is flex-wrap instead of box-lines
// nowrap = single line LTR
// wrap = multiple lines LTR
// wrap-reverse = multiple lines, reversed children LTR
// initial = nowrap
// not inherited by default; spec inherit to force it

// 2013 spec
.flex-wrap(@wrap-method) {
  -webkit-flex-wrap: @wrap-method;
  -moz-flex-wrap: @wrap-method;
  -ms-flex-wrap: @wrap-method;
  -o-flex-wrap: @wrap-method;
  flex-wrap: @wrap-method;
}

// align-items //

// applies to flex container

// Specifies the alignment of flex items within a container on the cross axis

// 2009 property is box-align
// tweener -ms- spec is flex-align
// start == flex-start
// end == flex-end
// center == center
// baseline == baseline
// stretch = stretch

.align-items(@align-item-method) when (@align-item-method = start) {
// 2009 spec
  -webkit-box-align: start;
  -moz-box-align: start;
  -ms-box-align: start;
  -o-box-align: start;
  box-align: start;
// tweener -ms- spec
  -ms-flex-align: start;
// 2013 spec
  -webkit-align-items: flex-start;
  -moz-align-items: flex-start;
  -ms-align-items: flex-start;
  -o-align-items: flex-start;
  align-items: flex-start;
}

.align-items(@align-item-method) when (@align-item-method = end) {
  // 2009 spec
    -webkit-box-align: end;
    -moz-box-align: end;
    -ms-box-align: end;
    -o-box-align: end;
    box-align: end;
  // tweener -ms- spec
    -ms-flex-align: end;
  // 2013 spec
  -webkit-align-items: flex-end;
  -moz-align-items: flex-end;
  -ms-align-items: flex-end;
  -o-align-items: flex-end;
  align-items: flex-end;
}

// for center, baseline, and stretch, which are the same in all specs
.align-items(@align-item-method) when
                                  (@align-item-method = center),
                                  (@align-item-method = baseline),
                                  (@align-item-method = stretch) {
// 2009 spec
  -webkit-box-align: @align-item-method;
  -moz-box-align: @align-item-method;
  -ms-box-align: @align-item-method;
  -o-box-align: @align-item-method;
  box-align: @align-item-method;
// tweener -ms- spec
  -ms-flex-align: @align-item-method;
// 2013 spec
  -webkit-align-items: @align-item-method;
  -moz-align-items: @align-item-method;
  -ms-align-items: @align-item-method;
  -o-align-items: @align-item-method;
  align-items: @align-item-method;
}

// align-self //

// applies to flex-items

// specifying an override alignment of an individual flex-item
// within a container on the cross axis

// 2009 spec does not have an equivalent fallback
// tweener -ms- spec is flex-item-align
// auto == auto
// start == flex-start
// end == flex-end
// center == center
// baseline == baseline
// stretch = stretch

.align-self(@align-self-method) when (@align-self-method = start) {
// tweener -ms- spec
  -ms-flex-item-align: @align-self-method;
  flex-item-align: @align-self-method;
// 2013 spec
  -webkit-align-self: flex-start;
  -moz-align-self: flex-start;
  -ms-align-self: flex-start;
  -o-align-self: flex-start;
  align-self: flex-start;
}

.align-self(@align-self-method) when (@align-self-method = end) {
// tweener -ms- spec
  -ms-flex-item-align: @align-self-method;
  flex-item-align: @align-self-method;
// 2013 spec
  -webkit-align-self: flex-end;
  -moz-align-self: flex-end;
  -ms-align-self: flex-end;
  -o-align-self: flex-end;
  align-self: flex-end;
}

// for auto, center, baseline, and stretch, which are the same in both specs
.align-self(@align-self-method) when
                                (@align-self-method = auto),
                                (@align-self-method = center),
                                (@align-self-method = baseline),
                                (@align-self-method = stretch) {
// tweener -ms- spec
  -ms-flex-item-align: @align-self-method;
  flex-item-align: @align-self-method;
// 2013 spec
  -webkit-align-self: @align-self-method;
  -moz-align-self: @align-self-method;
  -ms-align-self: @align-self-method;
  -o-align-self: @align-self-method;
  align-self: @align-self-method;
}

// Align Content //

// applies to flex container

// Flex line alignment: specifying alignment of flex lines (not individual items) along the cross-axis
// note: only applies when there is more than one line of content

// 2009 spec does not have an equivalent fallback
// microsoft property is flex-line-pack
// flex-end == end
// flex-start == start
// space-between == justify
// space-around == distribute
// center == center
// stretch == stretch

.align-content(@align-content-method) when (@align-content-method = start) {
// tweener -ms- spec
  -ms-flex-line-pack: @align-content-method;
// 2013 spec
  -webkit-align-content: flex-start;
  -moz-align-content: flex-start;
  -o-align-content: flex-start;
  align-content: flex-start;
}

.align-content(@align-content-method) when (@align-content-method = end) {
// tweener -ms- spec
  -ms-flex-line-pack: @align-content-method;
// 2013 spec
  -webkit-align-content: flex-end;
  -moz-align-content: flex-end;
  -o-align-content: flex-end;
  align-content: flex-end;
}

.align-content(@align-content-method) when (@align-content-method = space-between) {
// tweener -ms- spec
  -ms-flex-line-pack: justify;
// 2013 spec
  -webkit-align-content: space-between;
  -moz-align-content: space-between;
  -o-align-content: space-between;
  align-content: space-between;
}

.align-content(@align-content-method) when (@align-content-method = space-around) {
// tweener -ms- spec
  -ms-flex-line-pack: distribute;
// 2013 spec
  -webkit-align-content: space-around;
  -moz-align-content: space-around;
  -o-align-content: space-around;
  align-content: space-around;
}

.align-content(@align-content-method) when
                                  (@align-content-method = center),
                                  (@align-content-method = stretch) {
// tweener -ms- spec
  -ms-flex-line-pack: @align-content-method;
// 2013 spec
  -webkit-align-content: @align-content-method;
  -moz-align-content: @align-content-method;
  -o-align-content: @align-content-method;
  align-content: @align-content-method;
}

// Justify Content //

// applies to flex container

// Main Axis Alignment: specifying the alignment of flex items within a container on the primary axis

// 2009 spec == box-pack
// tweener MS spec == flex-pack
// current spec == justify-content

// flex-start == start
// center == center
// flex-end == end
// space-between == justify
// space-around == distribute
// 2009 spec does not support 'distribute' or 'space-around' property

.justify-content(@justify-method) when (@justify-method = start) {
  //2009
  -webkit-box-pack: @justify-method;
  -moz-box-pack: @justify-method;
  -ms-box-pack: @justify-method;
  -o-box-pack: @justify-method;
  box-pack: @justify-method;
//tweener -ms-
  -ms-flex-pack: @justify-method;
// current spec
  -webkit-justify-content: flex-start;
  -moz-justify-content: flex-start;
  -ms-justify-content: flex-start;
  -o-justify-content: flex-start;
  justify-content: flex-start;
}

.justify-content(@justify-method) when (@justify-method = end) {
// 2009 spec
  -webkit-box-pack: @justify-method;
  -moz-box-pack: @justify-method;
  -ms-box-pack: @justify-method;
  -o-box-pack: @justify-method;
  box-pack: @justify-method;
// tweener -ms- spec
  -ms-flex-pack: @justify-method;
// 2013 spec
  -webkit-justify-content: flex-end;
  -moz-justify-content: flex-end;
  -ms-justify-content: flex-end;
  -o-justify-content: flex-end;
  justify-content: flex-end;
}

.justify-content(@justify-method) when (@justify-method = center) {
// 2009 spec
  -webkit-box-pack: center;
  -moz-box-pack: center;
// tweener -ms- spec
  -ms-flex-pack: center;
// 2013 spec
  -webkit-justify-content: center;
  -moz-justify-content: center;
  -ms-justify-content: center;
  -o-justify-content: center;
  justify-content: center;
}

.justify-content(@justify-method) when (@justify-method = space-between) {
// 2009 spec
  -webkit-box-pack: justify;
  -moz-box-pack: justify;
// tweener -ms- spec
  -ms-flex-pack: justify;
// 2013 spec
  -webkit-justify-content: space-between;
  -moz-justify-content: space-between;
  -ms-justify-content: space-between;
  -o-justify-content: space-between;
  justify-content: space-between;
}

.justify-content(@justify-method) when (@justify-method = space-around) {
// 2009 spec has no equivalent
// tweener -ms- spec
  -ms-flex-pack: distribute;
// 2013 spec
  -webkit-justify-content: space-around;
  -moz-justify-content: space-around;
  -ms-justify-content: space-around;
  -o-justify-content: space-around;
  justify-content: space-around;
}

// flex-grow //

// applies to flex-items

// controls how an individual flex item in a flex container will grow
// flex grow factor is a multiplier that determines how much a flex item grows relative to the other
// items in the container

// flex-grow is the first of three shorthand values in the flex property

// 2009 spec has box-flex which is an effectively equivalent concept to flex-grow, since it only
// controls positive growth of flex items

.flex-grow(@multiplier) {
// 2009 spec
  -webkit-box-flex: @multiplier;
// 2013 spec and tweener -ms- spec
  -webkit-flex-grow: @multiplier;
  -moz-box-flex: @multiplier;
  -ms-flex: @multiplier 1 auto;
  flex-grow: @multiplier;
}

// flex-shrink //

// applies to flex-items

// controls how an individual flex item in a flex container will shrink
// flex shrink factor is a multiplier that determines how much a flex item shrinks relative to the other
// items in the container

// flex-shrink is the second of three shorthand values in the flex property

// 2009 spec does not have an equivalent to flex-shrink
// controls positive growth of flex items

.flex-shrink(@multiplier) {
// 2009 spec does not have an equivalent to flex-shrink
// 2013 spec and tweener -ms- spec
  -webkit-flex-shrink: @multiplier;
  -ms-flex: 0 @multiplier auto;
  flex-shrink: @multiplier;
}

// flex-basis //

// applies to flex-items

// controls initial width of a flex item, as specified by a standard width value, or 'auto'

// flex-basis is the third of three shorthand values in the flex property

// 2009 spec does not have an equivalent to flex-basis

.flex-basis(@width) {
// 2009 spec does not have an equivalent to flex-basis
// 2013 spec and tweener -ms- spec
  -webkit-flex-basis: @width;
  -ms-flex: 0 1 @width;
  flex-basis: @width;
}

// flex-flow //

// applies to flex container

// flex-flow is actually a shorthand combination of flex-direction and flex-wrap

// flex-direction accepts row | row-reverse | column | column-reverse
// flex-wrap accepts nowrap | wrap | wrap-reverse

.flex-flow (@direction; @rest...) {
  -webkit-flex-flow: @direction @rest;
  -ms-flex-flow: @direction @rest;
  flex-flow: @direction @rest;
}

// GRADIENTS
// --------------------------------------------------

#gradient {

    // Horizontal gradient, from left to right
    //
    // Creates two color stops, start and end, by specifying a color and position for each color stop.
    // Color stops are not available in IE9 and below.
    .horizontal(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
        background-image: -webkit-linear-gradient(left, color-stop(@start-color @start-percent), color-stop(@end-color @end-percent)); // Safari 5.1-6, Chrome 10+
        background-image:  linear-gradient(to right, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
        background-repeat: repeat-x;
        // filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down
    }

    // Vertical gradient, from top to bottom
    //
    // Creates two color stops, start and end, by specifying a color and position for each color stop.
    // Color stops are not available in IE9 and below.
    .vertical(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
        background-image: -webkit-linear-gradient(top, @start-color @start-percent, @end-color @end-percent);  // Safari 5.1-6, Chrome 10+
        background-image: linear-gradient(to bottom, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
        background-repeat: repeat-x;
        // filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down
    }

}

// Reset filters for IE
//
// When you need to remove a gradient background, do not forget to use this to reset
// the IE filter for IE9 and below.
.reset-filter() {
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}

// Retina images
//
// Short retina mixin for setting background-image and -size

.img-retina(@file-1x; @file-2x; @width-1x; @height-1x) {
    background-image: url("@{file-1x}");

    @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (   min--moz-device-pixel-ratio: 2),
    only screen and (     -o-min-device-pixel-ratio: 2/1),
    only screen and (        min-device-pixel-ratio: 2),
    only screen and (                min-resolution: 192dpi),
    only screen and (                min-resolution: 2dppx) {
        background-image: url("@{file-2x}");
        background-size: @width-1x @height-1x;
    }
}

// Responsive image
//
// Keep images from scaling beyond the width of their parents.

.img-responsive(@display: block) {
    display: @display;
    max-width: 100%; // Part 1: Set a maximum relative to the parent
    height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}

// Responsive utilities
// -------------------------
// More easily include all the states for responsive-utilities.less.
.responsive-visibility() {
    display: block !important;
    table&  { display: table; }
    tr&     { display: table-row !important; }
    th&,
    td&     { display: table-cell !important; }
}

.responsive-invisibility() {
    display: none !important;
}

// Creates a wrapper for a series of columns
.make-row(@gutter: @grid__gutter--width) {
    margin-left:  (@gutter / -2);
    margin-right: (@gutter / -2);
    & when (@vars__ie8-support = true) {
      .lt-ie9 & {
        margin-left:  (@grid__ie8-gutter--width / -2);
        margin-right: (@grid__ie8-gutter--width / -2);
      }
    }
}

.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
    .l-@{class}-@{index} {
        width: percentage((@index / @grid__columns));
    }
}
.calc-grid-column(@index, @class, @type) when (@type = push) {
    .l-@{class}-push-@{index} {
        left: percentage((@index / @grid__columns));
    }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) {
    .l-@{class}-pull-@{index} {
        right: percentage((@index / @grid__columns));
    }
}
.calc-grid-column(@index, @class, @type) when (@type = offset) {
    .l-@{class}-offset-@{index} {
        .direction-mixin(margin-right; percentage((@index / @grid__columns)));
    }
}

// Basic looping in LESS
.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
    .calc-grid-column(@index, @class, @type);
    // next iteration
    .loop-grid-columns((@index - 1), @class, @type);
}

// Create grid for specific class
.make-grid(@class) {
    .float-grid-columns(@class);
    .loop-grid-columns(@grid__columns, @class, width);
    .loop-grid-columns(@grid__columns, @class, pull);
    .loop-grid-columns(@grid__columns, @class, push);
    .loop-grid-columns(@grid__columns, @class, offset);
}

.float-grid-columns(@class) {
    .col(@index) when (@index = 1) { // initial
        @item: ~".@{class}-@{index}";
        .col((@index + 1), @item);
    }
    .col(@index, @list) when (@index =< @grid__columns) { // general
        @item: ~".@{class}-@{index}";
        .col((@index + 1), ~"@{list}, @{item}");
    }
    .col(1); // kickstart it
}

.make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
    .col(@index) when (@index = 1) { // initial
        @item: ~".xs-@{index}, .sm-@{index}, .md-@{index}, .lg-@{index}, .xl-@{index}";
        .col((@index + 1), @item);
    }
    .col(@index, @list) when (@index =< @grid__columns) { // general; "=<" isn't a typo
        @item: ~".xs-@{index}, .sm-@{index}, .md-@{index}, .lg-@{index}, .xl-@{index}";
        .col((@index + 1), ~"@{list}, @{item}");
    }
    .col(@index, @list) when (@index > @grid__columns) { // terminal
        .l-column {
            display: inline-block;
            vertical-align: top;
            position: relative;
            // Prevent columns from collapsing when empty
            min-height: 1px;
            // Inner gutter via padding
            padding-left:  (@grid__gutter--width / 2);
            padding-right: (@grid__gutter--width / 2);
            .box-sizing(border-box);

            & when (@vars__ie8-support = true) {
              .lt-ie9 & {
                padding-left:  (@grid__ie8-gutter--width / 2);
                padding-right: (@grid__ie8-gutter--width / 2);
              }
            }

        }
    }
    .col(1); // kickstart it
}

// direction mixins for rtl

.direction-mixin(@attr; @value; @direction: @vars__direction) when (@direction = rtl) and (iskeyword(@value)) and (@value = left) {
    @{attr}: right;
}

.direction-mixin(@attr; @value; @direction: @vars__direction) when (@direction = rtl) and (iskeyword(@value)) and (@value = right) {
    @{attr}: left;
}

.direction-mixin(@attr; @value; @direction: @vars__direction) when (@direction = rtl) and (length(@value) = 2) and (extract(@value, 1) = left), (@direction = rtl) and (extract(@value, 2) = left) {
    @new-value: replace(~"@{value}", "left", "right");
    @{attr}: @new-value;
}

.direction-mixin(@attr; @value; @direction: @vars__direction) when (@direction = rtl) and (length(@value) = 2) and (extract(@value, 1) = right), (@direction = rtl) and (extract(@value, 2) = right) {
    @new-value: replace(~"@{value}", "right", "left");
    @{attr}: @new-value;
}

.direction-mixin(@attr; @value; @direction: @vars__direction) when (@direction = rtl) and (iskeyword(@value) = false) and (length(@value) = 4) {
    @return: extract(@value, 1) extract(@value, 4) extract(@value, 3) extract(@value, 2);
    @{attr}: @return;
}

.direction-mixin(@attr; @value; @direction: @vars__direction) when (@direction = rtl) and (@attr = padding-right), (@direction = rtl) and (@attr = right), (@direction = rtl) and (@attr = margin-right), (@direction = rtl) and (@attr = border-right) {
    @new-attr: replace(~"@{attr}", "right", "left");
    @{new-attr}: @value;
}

.direction-mixin(@attr; @value; @direction: @vars__direction) when (@direction = rtl) and (@attr = padding-left), (@direction = rtl) and (@attr = left), (@direction = rtl) and (@attr = margin-left), (@direction = rtl) and (@attr = border-left) {
    @new-attr: replace(~"@{attr}", "left", "right");
    @{new-attr}: @value;
}

.direction-mixin(@attr; @value; @direction: @vars__direction) when (default()) {
    @{attr}: @value;
}